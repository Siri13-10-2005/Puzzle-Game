import java.awt.*;  
import java.awt.event.*;  
import javax.swing.JOptionPane;  
public class Puzzle extends Frame implements ActionListener{  
Button b1,b2,b3,b4,b5,b6,b7,b8,b9;  
Puzzle(){  
    super("Puzzle - JavaTpoint");  
    b1=new Button("1");  
    b1.setBounds(50,100,40,40);  
    b2=new Button("2");  
    b2.setBounds(100,100,40,40);  
    b3=new Button("3");  
    b3.setBounds(150,100,40,40);  
    b4=new Button("4");  
    b4.setBounds(50,150,40,40);  
    b5=new Button("5");  
    b5.setBounds(100,150,40,40);  
    b6=new Button("6");  
    b6.setBounds(150,150,40,40);  
    b7=new Button("7");  
    b7.setBounds(50,200,40,40);  
    b8=new Button("");  
    b8.setBounds(100,200,40,40);  
    b9=new Button("8");  
    b9.setBounds(150,200,40,40);  
      
    b1.addActionListener(this);  
    b2.addActionListener(this);  
    b3.addActionListener(this);  
    b4.addActionListener(this);  
    b5.addActionListener(this);  
    b6.addActionListener(this);  
    b7.addActionListener(this);  
    b8.addActionListener(this);  
    b9.addActionListener(this);  
      
    add(b1);add(b2);add(b3);add(b4);add(b5);add(b6);add(b7);add(b8);add(b9);  
    setSize(400,400);  
    setLayout(null);  
    setVisible(true);  
}  
public void actionPerformed(ActionEvent e){  
    if(e.getSource()==b1){  
        String label=b1.getLabel();  
        if(b2.getLabel().equals("")){  
            b2.setLabel(label);  
            b1.setLabel("");  
        }  
        if(b4.getLabel().equals("")){  
            b4.setLabel(label);  
            b1.setLabel("");  
        }  
    }  
    if(e.getSource()==b2){  
        String label=b2.getLabel();  
        if(b1.getLabel().equals("")){  
            b1.setLabel(label);  
            b2.setLabel("");  
        }  
        if(b3.getLabel().equals("")){  
            b3.setLabel(label);  
            b2.setLabel("");  
        }  
        if(b5.getLabel().equals("")){  
            b5.setLabel(label);  
            b2.setLabel("");  
        }  
    }  
    if(e.getSource()==b3){  
        String label=b3.getLabel();  
        if(b2.getLabel().equals("")){  
            b2.setLabel(label);  
            b3.setLabel("");  
        }  
        if(b6.getLabel().equals("")){  
            b6.setLabel(label);  
            b3.setLabel("");  
        }  
    }  
    if(e.getSource()==b4){  
        String label=b4.getLabel();  
        if(b1.getLabel().equals("")){  
            b1.setLabel(label);  
            b4.setLabel("");  
        }  
        if(b7.getLabel().equals("")){  
            b7.setLabel(label);  
            b4.setLabel("");  
        }  
        if(b5.getLabel().equals("")){  
            b5.setLabel(label);  
            b4.setLabel("");  
        }  
    }  
    if(e.getSource()==b5){  
        String label=b5.getLabel();  
        if(b2.getLabel().equals("")){  
            b2.setLabel(label);  
            b5.setLabel("");  
        }  
        if(b6.getLabel().equals("")){  
            b6.setLabel(label);  
            b5.setLabel("");  
        }  
        if(b4.getLabel().equals("")){  
            b4.setLabel(label);  
            b5.setLabel("");  
        }  
        if(b8.getLabel().equals("")){  
            b8.setLabel(label);  
            b5.setLabel("");  
        }  
    }  
    if(e.getSource()==b6){  
        String label=b6.getLabel();  
        if(b9.getLabel().equals("")){  
            b9.setLabel(label);  
            b6.setLabel("");  
        }  
        if(b3.getLabel().equals("")){  
            b3.setLabel(label);  
            b6.setLabel("");  
        }  
        if(b5.getLabel().equals("")){  
            b5.setLabel(label);  
            b6.setLabel("");  
        }  
    }  
    if(e.getSource()==b7){  
        String label=b7.getLabel();  
        if(b4.getLabel().equals("")){  
            b4.setLabel(label);  
            b7.setLabel("");  
        }  
        if(b8.getLabel().equals("")){  
            b8.setLabel(label);  
            b7.setLabel("");  
        }  
    }  
    if(e.getSource()==b8){  
        String label=b8.getLabel();  
        if(b9.getLabel().equals("")){  
            b9.setLabel(label);  
            b8.setLabel("");  
        }  
        if(b7.getLabel().equals("")){  
            b7.setLabel(label);  
            b8.setLabel("");  
        }  
        if(b5.getLabel().equals("")){  
            b5.setLabel(label);  
            b8.setLabel("");  
        }  
    }  
    if(e.getSource()==b9){  
        String label=b9.getLabel();  
        if(b6.getLabel().equals("")){  
            b6.setLabel(label);  
            b9.setLabel("");  
        }  
        if(b8.getLabel().equals("")){  
            b8.setLabel(label);  
            b9.setLabel("");  
        }  
    }  
      
    //congrats code  
    if(b1.getLabel().equals("1")&&b2.getLabel().equals("2")&&b3.getLabel()    
            .equals("3")&&b4.getLabel().equals("4")&&b5.getLabel().equals("5")    
            &&b6.getLabel().equals("6")&&b7.getLabel().equals("7")&&b8.getLabel()    
            .equals("8")&&b9.getLabel().equals("")){     
            JOptionPane.showMessageDialog(this,"Congratulations! You won.");    
    }    
}  
public static void main(String[] args) {  
    new Puzzle();  
}  
}  
Puzzle Game using Swing
Puzzle game in swing
import java.awt.*;  
import javax.swing.*;  
import java.awt.event.*;  
public class puzzle extends JFrame implements ActionListener{  
JButton b1,b2,b3,b4,b5,b6,b7,b8,b9,next;  
puzzle(){  
super("Puzzle Game - JavaTpoint");  
 b1=new JButton("1");  
 b2=new JButton(" ");  
 b3=new JButton("3");  
 b4=new JButton("4");  
 b5=new JButton("5");  
 b6=new JButton("6");  
 b7=new JButton("7");  
 b8=new JButton("8");  
 b9=new JButton("2");  
 next=new JButton("next");  
  
b1.setBounds(10,30,50,40);  
b2.setBounds(70,30,50,40);  
b3.setBounds(130,30,50,40);  
b4.setBounds(10,80,50,40);  
b5.setBounds(70,80,50,40);  
b6.setBounds(130,80,50,40);  
b7.setBounds(10,130,50,40);  
b8.setBounds(70,130,50,40);  
b9.setBounds(130,130,50,40);  
next.setBounds(70,200,100,40);  
    
add(b1);add(b2);add(b3);add(b4);add(b5);add(b6);add(b7);add(b8);add(b9); add(next);  
b1.addActionListener(this);  
b2.addActionListener(this);  
b3.addActionListener(this);  
b4.addActionListener(this);  
b5.addActionListener(this);  
b6.addActionListener(this);  
b7.addActionListener(this);  
b8.addActionListener(this);  
b9.addActionListener(this);  
next.addActionListener(this);  
  
next.setBackground(Color.black);  
next.setForeground(Color.green);  
setSize(250,300);  
setLayout(null);  
setVisible(true);  
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  
}//end of constructor  
  
public void actionPerformed(ActionEvent e){  
if(e.getSource()==next){  
String s=b4.getLabel();  
b4.setLabel(b9.getLabel());  
b9.setLabel(s);  
s=b1.getLabel();  
b1.setLabel(b5.getLabel());  
b5.setLabel(s);  
s=b2.getLabel();  
b2.setLabel(b7.getLabel());  
b7.setLabel(s);  
}  
if(e.getSource()==b1){  
String s=b1.getLabel();  
if(b2.getLabel().equals(" ")){ b2.setLabel(s); b1.setLabel(" ");}  
else if(b4.getLabel().equals(" ")){ b4.setLabel(s); b1.setLabel(" ");}  
 }//end of if  
  
if(e.getSource()==b3){  
String s=b3.getLabel();  
if(b2.getLabel().equals(" ")){ b2.setLabel(s); b3.setLabel(" ");}  
else if(b6.getLabel().equals(" ")){ b6.setLabel(s); b3.setLabel(" ");}  
 }//end of if  
  
if(e.getSource()==b2){  
String s=b2.getLabel();  
if(b1.getLabel().equals(" ")){ b1.setLabel(s); b2.setLabel(" ");}  
else if(b3.getLabel().equals(" ")){ b3.setLabel(s); b2.setLabel(" ");}  
else if(b5.getLabel().equals(" ")){ b5.setLabel(s); b2.setLabel(" ");}  
 }//end of if  
  
if(e.getSource()==b4){  
String s=b4.getLabel();  
if(b1.getLabel().equals(" ")){ b1.setLabel(s); b4.setLabel(" ");}  
else if(b7.getLabel().equals(" ")){ b7.setLabel(s); b4.setLabel(" ");}  
else if(b5.getLabel().equals(" ")){ b5.setLabel(s); b4.setLabel(" ");}  
 }//end of if  
  
if(e.getSource()==b5){  
String s=b5.getLabel();  
if(b2.getLabel().equals(" ")){ b2.setLabel(s); b5.setLabel(" ");}  
else if(b4.getLabel().equals(" ")){ b4.setLabel(s); b5.setLabel(" ");}  
else if(b6.getLabel().equals(" ")){ b6.setLabel(s); b5.setLabel(" ");}  
else if(b8.getLabel().equals(" ")){ b8.setLabel(s); b5.setLabel(" ");}  
 }//end of if  
  
if(e.getSource()==b6){  
  
String s=b6.getLabel();  
if(b9.getLabel().equals(" ")){ b9.setLabel(s); b6.setLabel(" ");}  
else if(b3.getLabel().equals(" ")){ b3.setLabel(s); b6.setLabel(" ");}  
else if(b5.getLabel().equals(" ")){ b5.setLabel(s); b6.setLabel(" ");}  
  
 }//end of if  
  
if(e.getSource()==b7){  
String s=b7.getLabel();  
if(b4.getLabel().equals(" ")){ b4.setLabel(s); b7.setLabel(" ");}  
else if(b8.getLabel().equals(" ")){ b8.setLabel(s); b7.setLabel(" ");}  
  
 }//end of if  
  
if(e.getSource()==b8){  
String s=b8.getLabel();  
if(b7.getLabel().equals(" ")){ b7.setLabel(s); b8.setLabel(" ");}  
else if(b9.getLabel().equals(" ")){ b9.setLabel(s); b8.setLabel(" ");}  
else if(b5.getLabel().equals(" ")){ b5.setLabel(s); b8.setLabel(" ");}  
  
 }//end of if  
  
if(e.getSource()==b9){  
String s=b9.getLabel();  
if(b6.getLabel().equals(" ")){ b6.setLabel(s); b9.setLabel(" ");}  
else if(b8.getLabel().equals(" ")){ b8.setLabel(s); b9.setLabel(" ");}  
  
if(b1.getLabel().equals("1")&&b2.getLabel().equals("2")&&b3.getLabel()  
.equals("3")&&b4.getLabel().equals("4")&&b5.getLabel().equals("5")  
&&b6.getLabel().equals("6")&&b7.getLabel().equals("7")&&b8.getLabel()  
.equals("8")&&b9.getLabel().equals(" ")){   
JOptionPane.showMessageDialog(puzzle.this,"!!!you won!!!");  
}  
 }//end of if  
  
}//end of actionPerformed  
   
  
public static void main(String[] args){  
new puzzle();  
}//end of main  
  
}//end of class  
import java.util.Scanner;
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num1 = sc.nextInt();
        int num2 = sc.nextInt();
        int sum1=0;sum2=0;
        for(int itr=1;itr<=num1;itr++)
{
    if(num1%itr==0){
        sum1=sum1+itr;
    }
}
    for(int itr1=1;itr1<=num2;itr1++)
{
    if(num2%itr==0){
        sum2=sum2+itr1;
    }
}  

if(num2==sum1 && num1==sum2)
{
    System.out.println("ambicalbe");
}
else {
    System.out.println("not");
}
}
}
import java.util.Scanner;

public class Main {


	public static boolean isPerfectNumber(int number) {
		int sum = 0;


		for (int i = 1; i <= number / 2; i++) {
			if (number % i == 0) {
				sum += i;
			}
		}


		return sum == number;
	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		System.out.print("Enter a number: ");
		int number = scanner.nextInt();


		if (isPerfectNumber(number)) {
			System.out.println(number + " is a perfect number.");
		} else {
			System.out.println(number + " is not a perfect number.");
		}

		scanner.close();
	}
}
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class Panel00 extends JPanel {
	Timer t = new Timer(1, new Listener());
	int ctr = 0;
	double G = 0.1; //Gravitational Constant

	final int xpos = 280;
	
	double[] p2d = {280, 200};
	double[] v2d = {0, 0};
	
	int points = 0;
	int lives = 0;
	int sides = 13;
	
	double snorm = 400;
	double sd = 450;
	double sv = 0;
	boolean setlock = false;
	boolean rdown, ldown;
	double paddle = 130;
	double rtheta = 0;
	double ltheta = 0;
	
	int preset[][] = {
			{0, 400, 135, 450,1}, //right paddle
			{135, 450, 270, 400,1}, //left paddle
			{270, 0, 300, 20, 1}, //first bouncey thingy
			{291, 0, 291, 500, 1}, //right wall
			{-1, 0, 270, 0, 1}, //top wall
			{0, -1, 0, 500, 1} //left wall
	};

	int[][] balls = {
			{80, 80, 30, 50},
			{230, 280, 20, 200},
			{50, 200, 25, 100},
			{200, 100, 10, 500}
	};
	int lines[][] = new int[100][5];
	
	public Panel00(){
		super();
		t.start();
		addKeyListener(new Key());
		setFocusable(true);
		
		for(int i = 0; i < preset.length; i++){
			lines[i] = preset[i];
		}
		
		int plen = preset.length;
		
		int ct = 0;
		for(int k = 0; k < balls.length; k++){
			int px = balls[k][0], py = balls[k][1], radius = balls[k][2];
			for(double i = 0; i < 2 * Math.PI; i+= 2 * Math.PI/ sides){
				ct++;
				lines[plen + ct][0] = px + (int) (radius * Math.cos(i));
				lines[plen + ct][1] = py + (int) (radius * Math.sin(i));
				lines[plen + ct][2] = px + (int) (radius * Math.cos(i - 2 *Math.PI / sides));
				lines[plen + ct][3] = py + (int) (radius * Math.sin(i - 2 * Math.PI / sides));
			}
		}
		
	}
	
	private class Listener implements ActionListener {
		public void actionPerformed(ActionEvent e){
			repaint();
		}
	}
	
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		v2d[1] += G;
		p2d[1] += v2d[1];
		p2d[0] += v2d[0];
		

		
		if(p2d[1] > 1000){
			p2d[0] = 280;
			p2d[1] = 200;
			v2d[0] = 0;
			v2d[1] = 0;
			lives++;
		}
		if(p2d[0] == 280 && p2d[1] > sd){
			p2d[1] = sd;
			v2d[1] = Math.min(v2d[1], sv);
		}
		
		if(setlock == false){
			sv *= 0.95; //the dampening coefficient for the springiness
			sv -= (sd - snorm)/30;
			sd += sv;
		}
		double rc = 0.1;
		if(rdown){
			rtheta = Math.max(-0.5, rtheta - rc);
		}else{
			rtheta = Math.min(0.5, rtheta + rc);
		}
		if(ldown){
			ltheta = Math.max(-0.5, ltheta - rc);
		}else{
			ltheta = Math.min(0.5, ltheta + rc);
		}
		
		lines[0][2] = lines[0][0] + (int) (Math.cos(ltheta) * paddle);
		lines[0][3] = lines[0][1] + (int) (Math.sin(ltheta) * paddle);
		lines[1][0] = lines[1][2] + (int) (-Math.cos(rtheta) * paddle);
		lines[1][1] = lines[1][3] + (int) (Math.sin(rtheta) * paddle);
		int rX = (int) p2d[0];
		int rY = (int) p2d[1];
		int r = 10;
		g.setColor(Color.blue);
		g.drawArc(rX - r, rY - r, 2 * r, 2 * r, 0, 360);
		g.setColor(Color.black);
		for(int i = 0; i < lines.length; i++){
			int x1 = lines[i][0],
				y1 = lines[i][1],
				x2 = lines[i][2];
			double y2 = lines[i][3] + 0.0001;
			if(i > preset.length){
				g.setColor(Color.red);
			}
			g.drawLine(x1, y1, x2, (int) Math.round(y2));

			double bmag = Math.sqrt(v2d[0] * v2d[0] + v2d[1] * v2d[1]);
			double lineslope = ((double)(x2 - x1))/((double)(y2 - y1));
			double ballslope = v2d[0] / v2d[1];
			//System.out.println(ballslope + " " + lineslope);
			//xpos * ballslope + p2d[1] = xpos * lineslope + y1;
			double binter = p2d[0] - ballslope * p2d[1];
			double linter = x1 - lineslope * y1;
			
			double y = (binter - linter)/(lineslope - ballslope);
			double sx = y * ballslope + binter;
			//double qx = y * lineslope + linter;
			double la = Math.atan2(y2 - y1, x2 - x1);
			double ba = Math.atan2(v2d[1], v2d[0]);
			
			double da = 2 * la -  ba;
					
			//System.out.println(sx + " " + y);
			/*
			g.drawLine((int)sx, (int)y, (int)p2d[0], (int)p2d[1]); 
			g.fillRect((int)sx - 2, (int)y - 2, 4, 4);
			g.drawLine((int)p2d[0], (int)p2d[1], (int) (p2d[0] + Math.cos(da) * 100), (int)(p2d[1] + Math.sin(da) * 100)); 
			//*/
			if(sx >= Math.min(x2, x1) && sx <= Math.max(x1, x2) && 
			   Math.min(y1, y2) <= y && Math.max(y1, y2) >= y){
				double interdist = Math.sqrt(Math.pow(sx - p2d[0],2) + Math.pow(y - p2d[1],2));
				double tiny = 0.0001;
				double futuredist = Math.sqrt(Math.pow(sx - (p2d[0] + Math.cos(ba) * tiny),2) + Math.pow(y - (p2d[1] + Math.sin(ba) * tiny),2));
				
				if(interdist <=  bmag + r && futuredist < interdist){ 
					//System.out.println("Carl Sagan" + i); //this is a pun because he wrote a book called Contact
					if(i > preset.length){
						int ball = (int) Math.floor((i - preset.length)/sides);
						//System.out.println(balls[ball][2]);
						points += balls[ball][3] * bmag;
					}
					v2d[0] = Math.cos(da) * bmag;
					v2d[1] = Math.sin(da) * bmag;
				}
			}
		}
		g.setColor(Color.black);
		//System.out.println(sx + " " + qx);
		//System.out.println(ballslope + " " + lineslope);
		//double slope = Math.atan2(v2d[1], v2d[0]);
		//g.drawLine((int) p2d[0], (int) p2d[1], (int) (p2d[0]+10*v2d[0]), (int) (p2d[1]+10*v2d[1]));
		
		g.fillRect(xpos - 5, (int)sd + 10, 10, 20);
		
		g.drawString("Score: " + points + " Resets: " + lives, 10, 15);
		
	}
	
	private class Key extends KeyAdapter {
		public void keyPressed(KeyEvent e){
			if(e.getKeyCode() == KeyEvent.VK_DOWN){
				setlock = true;
				sd += 2;
			}
			if(e.getKeyCode() == KeyEvent.VK_LEFT){
				ldown = true;
			}
			if(e.getKeyCode() == KeyEvent.VK_RIGHT){
				rdown = true;
			}
		}
		public void keyReleased(KeyEvent e){
			setlock = false;
			if(e.getKeyCode() == KeyEvent.VK_LEFT){
				ldown = false;
			}
			if(e.getKeyCode() == KeyEvent.VK_RIGHT){
				rdown = false;
			}
		}
	}
}